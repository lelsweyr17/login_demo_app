{
  "swagger":"2.0",
  "info":{
    "title":"Like Kanban API",
    "description":"API for Kanban table, like trello.com",
    "termsOfService":"https://www.google.com/policies/terms/",
    "contact":{
      "email":"contact@localhost"
    },
    "license":{
      "name":"MIT License"
    },
    "version":"v1"
  },
  "host":"trello.backend.tests.nekidaem.ru",
  "schemes":[
    "https"
  ],
  "basePath":"/api/v1",
  "consumes":[
    "application/json"
  ],
  "produces":[
    "application/json"
  ],
  "securityDefinitions":{
    "Bearer":{
      "description":"Example of Authorization header value: \"JWT adsfasd3qo8z3zrq9w8exnyo\"",
      "in":"header",
      "name":"Authorization",
      "type":"apiKey"
    }
  },
  "security":[
    {
      "Bearer":[]
    }
  ],
  "paths":{
    "/cards/":{
      "get":{
        "operationId":"cards_list",
        "summary":"Get cards",
        "description":"Return list of the user cards sorted by row and seq_num",
        "parameters":[
          {
            "name":"row",
            "in":"query",
            "description":"You can filter a cards by row",
            "type":"string"
          }
        ],
        "responses":{
          "200":{
            "description":"",
            "schema":{
              "type":"array",
              "items":{
                "$ref":"#/definitions/CardCreateRecieve"
              }
            }
          }
        },
        "tags":[
          "cards"
        ]
      },
      "post":{
        "operationId":"cards_create",
        "summary":"Create new card",
        "description":"Recieve data, create new card and return it",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/CardCreateRecieve"
            }
          }
        ],
        "responses":{
          "201":{
            "description":"",
            "schema":{
              "$ref":"#/definitions/CardCreateRecieve"
            }
          }
        },
        "tags":[
          "cards"
        ]
      },
      "parameters":[]
    },
    "/cards/{id}/":{
      "patch":{
        "operationId":"cards_partial_update",
        "summary":"Update card",
        "description":"When you update card row or seq_num, other cards in current and\nnew row will be sorted like this\n\n[1].....[5].....|.....[1].....[5]\n\n[2] â–¶ [6].....|.....[3].....[2]\n\n[3].....[7].....|.....[4].....[6]\n\n[4]..............|..............[7]",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/CardUpdateDelete"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"",
            "schema":{
              "$ref":"#/definitions/CardUpdateDelete"
            }
          }
        },
        "tags":[
          "cards"
        ]
      },
      "delete":{
        "operationId":"cards_delete",
        "summary":"Delete card",
        "description":"Delete user card",
        "parameters":[],
        "responses":{
          "204":{
            "description":""
          }
        },
        "tags":[
          "cards"
        ]
      },
      "parameters":[
        {
          "name":"id",
          "in":"path",
          "description":"A unique integer value identifying this card.",
          "required":true,
          "type":"integer"
        }
      ]
    },
    "/users/create/":{
      "post":{
        "operationId":"users_create_create",
        "summary":"Create user",
        "description":"Recieve data, create new user and return it.\nAlso generate and return JWT token that\ncan be used for authenticated requests",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/User"
            }
          }
        ],
        "responses":{
          "201":{
            "description":"",
            "schema":{
              "$ref":"#/definitions/User"
            }
          }
        },
        "tags":[
          "users"
        ]
      },
      "parameters":[]
    },
    "/users/login/":{
      "post":{
        "operationId":"users_login_create",
        "summary":"Obtain JWT token",
        "description":"Receives data, return token that can be used for authenticated requests",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/JSONWebToken"
            }
          }
        ],
        "responses":{
          "201":{
            "description":"",
            "schema":{
              "$ref":"#/definitions/JSONWebToken"
            }
          }
        },
        "tags":[
          "users"
        ]
      },
      "parameters":[]
    },
    "/users/refresh_token/":{
      "post":{
        "operationId":"users_refresh_token_create",
        "summary":"Refreshed JWT token",
        "description":"Receives data adn returns a refreshed token (with new expiration)\nbased on existing token. If 'orig_iat' field (original issued-at-time)\nis found, will first check if it's within expiration window, then copy\nit to the new token",
        "parameters":[
          {
            "name":"data",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/RefreshJSONWebToken"
            }
          }
        ],
        "responses":{
          "201":{
            "description":"",
            "schema":{
              "$ref":"#/definitions/RefreshJSONWebToken"
            }
          }
        },
        "tags":[
          "users"
        ]
      },
      "parameters":[]
    }
  },
  "definitions":{
    "CardCreateRecieve":{
      "required":[
        "row",
        "text"
      ],
      "type":"object",
      "properties":{
        "id":{
          "title":"ID",
          "type":"integer",
          "readOnly":true
        },
        "row":{
          "title":"Row",
          "type":"string",
          "enum":[
            "0",
            "1",
            "2",
            "3"
          ]
        },
        "seq_num":{
          "title":"Sequence number",
          "type":"integer",
          "readOnly":true
        },
        "text":{
          "title":"Text",
          "type":"string",
          "minLength":1
        }
      }
    },
    "CardUpdateDelete":{
      "required":[
        "row",
        "seq_num",
        "text"
      ],
      "type":"object",
      "properties":{
        "id":{
          "title":"ID",
          "type":"integer",
          "readOnly":true
        },
        "row":{
          "title":"Row",
          "type":"string",
          "enum":[
            "0",
            "1",
            "2",
            "3"
          ]
        },
        "seq_num":{
          "title":"Sequence number",
          "type":"integer",
          "maximum":2147483647,
          "minimum":-2147483648
        },
        "text":{
          "title":"Text",
          "type":"string",
          "minLength":1
        }
      }
    },
    "User":{
      "required":[
        "username",
        "password"
      ],
      "type":"object",
      "properties":{
        "username":{
          "title":"Username",
          "description":"Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
          "type":"string",
          "pattern":"^[\\w.@+-]+$",
          "maxLength":150,
          "minLength":1
        },
        "email":{
          "title":"Email address",
          "type":"string",
          "format":"email",
          "maxLength":254
        },
        "password":{
          "title":"Password",
          "type":"string",
          "maxLength":128,
          "minLength":1
        },
        "token":{
          "title":"Token",
          "type":"string",
          "readOnly":true,
          "minLength":1
        }
      }
    },
    "JSONWebToken":{
      "required":[
        "username",
        "password"
      ],
      "type":"object",
      "properties":{
        "username":{
          "title":"Username",
          "type":"string",
          "minLength":1
        },
        "password":{
          "title":"Password",
          "type":"string",
          "minLength":1
        },
        "token":{
          "title":"Token",
          "type":"string",
          "readOnly":true,
          "minLength":1
        }
      }
    },
    "RefreshJSONWebToken":{
      "required":[
        "token"
      ],
      "type":"object",
      "properties":{
        "token":{
          "title":"Token",
          "type":"string",
          "minLength":1
        }
      }
    }
  }
}